#version 450

out vec4 FragColour;

in vec2 uvs;

in mat3 TBNmatrix;
in vec3 debugColour;

// projection
uniform mat4 modelMatrix;

// lighting
uniform vec3 fromLight1;
uniform vec3 fromLight2;
uniform float light1Multiplier;
uniform float light2Multiplier;
uniform vec3 lightColour1;
uniform vec3 lightColour2;

// textures
uniform sampler2D diffuseTexture;
uniform sampler2D normalMap;

void main()
{
	// calculate the world space normals using the tangeant space and object space normals	
	vec3 tangeantSpaceNormals = texture(normalMap, uvs).xyz * 2.0 - 1.0;
	vec3 objectSpaceNormals = TBNmatrix * tangeantSpaceNormals;
	vec3 worldSpaceNormals = normalize((modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz);

	vec3 lightVal = max(dot(worldSpaceNormals, -fromLight1), 0.0) * lightColour1 *light1Multiplier;
	lightVal += max(dot(worldSpaceNormals, -fromLight2), 0.0) * lightColour2 * light2Multiplier;

	FragColour = texture(diffuseTexture, uvs) * vec4(lightVal, 1);
	//FragColour = vec4(objectSpaceNormals * 0.5 + 0.5, 1.0); // debug colours
	//FragColour = vec4(lightVal, 1);
}