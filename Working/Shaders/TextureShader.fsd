#version 450

out vec4 FragColour;

in vec2 uvs;

in mat3 TBNmatrix;
in vec3 debugColour;

uniform vec3 fromLight;
uniform mat4 modelMatrix;

uniform sampler2D diffuseTexture;
uniform sampler2D normalMap;

void main()
{
	// calculate the world space normals using the tangeant space and object space normals	
	vec3 tangeantSpaceNormals = texture(normalMap, uvs).xyz;
	vec3 objectSpaceNormals = TBNmatrix * tangeantSpaceNormals;
	vec3 worldSpaceNormals = (modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz;

	float lightVal = max(dot(worldSpaceNormals, -fromLight), 0.0);
	FragColour = texture(diffuseTexture, uvs) * lightVal;
}