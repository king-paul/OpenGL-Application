#version 450

out vec4 FragColour;

in vec2 uvs;

in mat3 TBNmatrix;
in vec3 debugColour;

// projection
uniform mat4 modelMatrix;

struct Light
{
	vec3 direction;
	vec3 colour;
	float intensity;	
};

uniform Light lights[10];

// textures
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D specularMap;

// specular calculations
uniform vec3 cameraForward;
uniform float specularPower;

void main()
{
	// calculate the world space normals using the tangeant space and object space normals	
	vec3 tangeantSpaceNormals = texture(normalMap, uvs).xyz * 2.0 - 1.0;
	vec3 objectSpaceNormals = TBNmatrix * tangeantSpaceNormals;
	vec3 worldSpaceNormals = normalize((modelMatrix * vec4(objectSpaceNormals, 0.0)).xyz);

	vec3 lightVal = {0, 0, 0};
	vec3 specularHighlights = {0, 0, 0};

	for(int i=0; i < 2; i++)
	{		
		lightVal += max(dot(worldSpaceNormals, lights[i].direction), 0.0) * lights[i].colour * lights[i].intensity;
		specularHighlights += texture(specularMap, uvs).xyz * pow(dot(reflect(lights[i].direction, worldSpaceNormals), cameraForward), specularPower);
	}

	FragColour = texture(diffuseMap, uvs) * vec4(lightVal, 1) + vec4(specularHighlights, 1.0f);

	// debug fragment colours
	//FragColour = vec4(lightVal, 1);
}